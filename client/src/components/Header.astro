---
import type { GlobalPageHeader } from "../utils/types";
import StrapiImage from "./StrapiImage.astro";

interface Props {
  data: GlobalPageHeader;
}

const {
  data: { logo, navItems, cta },
} = Astro.props;

const currentPath = Astro.url.pathname;

---

<header class="sticky top-0 z-50">
  <nav class="relative px-6 py-6 flex justify-between items-center bg-white">
    <a class="text-3xl font-bold leading-none" href={logo.logoLink}>
      <StrapiImage src={logo.image.url} alt={logo.image.alternativeText} height={48} width={48} />
    </a>
    <div class="lg:hidden">
      <button class="navbar-burger flex items-center text-green-600 p-3" id="burger-button">
        <svg
          class="block h-4 w-4 fill-current"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <title>Mobile menu</title>
          <path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"></path>
        </svg>
      </button>
    </div>
    <ul
      class="hidden absolute top-1/2 left-1/2 transform -translate-y-1/2 -translate-x-1/2 lg:mx-auto lg:flex lg:items-center lg:w-auto lg:space-x-6"
    >
      {
        navItems.map((item) => (
          <li>
            <a
              class={`text-sm font-bold ${currentPath === item.href ? 'text-green-600' : 'text-gray-400 hover:text-gray-500'}`}
              href={item.href}
              target={item.isExternal ? "_blank" : "_self"}
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>
    {
      cta && (
        <a
          class="hidden lg:inline-block py-2 px-6 bg-green-500 hover:bg-green-600 text-sm text-white font-bold rounded-l-xl rounded-t-xl transition duration-200"
          href={cta.href}
          target={cta.isExternal ? "_blank" : "_self"}
        >
          {cta.label}
        </a>
      )
    }
  </nav>
  <div
    class="navbar-menu fixed top-0 left-0 bottom-0 w-5/6 max-w-sm z-50 hidden"
    id="navbar-menu"
  >
    <div class="navbar-backdrop fixed inset-0 bg-gray-800 opacity-25"></div>
    <nav
      class="relative flex flex-col py-6 px-6 h-full w-full bg-white border-r overflow-y-auto"
    >
      <div class="flex items-center mb-8">
        <a class="mr-auto text-3xl font-bold leading-none" href={logo.logoLink}>
          <StrapiImage class="h-12 w-12" src={logo.image.url} alt={logo.image.alternativeText} height={48} width={48} />
        </a>
        <button class="navbar-close">
          <svg
            class="h-6 w-6 text-gray-400 cursor-pointer hover:text-gray-500"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div>
        <ul>
          {
            navItems.map((item) => (
              <li class="mb-1">
                <a
                  class="block p-4 text-sm font-semibold text-gray-400 hover:bg-green-50 hover:text-green-600 rounded"
                  href={item.href}
                  target={item.isExternal ? "_blank" : "_self"}
                >
                  {item.label}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="mt-auto">
        <div class="pt-6">
          { cta && (
            <a
              class="block px-4 py-3 mb-2 leading-loose text-xs text-center text-white font-semibold bg-green-600 hover:bg-green-700 rounded-l-xl rounded-t-xl"
              href={cta.href}
              target={cta.isExternal ? "_blank" : "_self"}
            >{cta.label}</a>
          )}
        </div>
      </div>
    </nav>
  </div>
</header>

<script>
  const burgerButton = document.getElementById('burger-button') as HTMLButtonElement;
  const navbarMenu = document.getElementById('navbar-menu') as HTMLDivElement;
  const closeButton = document.querySelector('.navbar-close') as HTMLButtonElement;
  
  burgerButton.addEventListener('click', () => {
    navbarMenu.classList.toggle('hidden');
  });

  closeButton.addEventListener('click', () => {
    navbarMenu.classList.add('hidden');
  });
  
</script>
